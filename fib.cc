#include <iostream>
#include <cmath>
#include <limits>
#include <string>
#include <vector>
#include <algorithm>

#define ULLMAX 	std::numeric_limits<unsigned long long>::max()

// number from https://apod.nasa.gov/htmltest/gifcity/sqrt5.1mil
#define SQRT_5 2.23606797749978969640917366873127623544061835961152572427089724541052092563780489941441440837878227496950817615077378350425326772444707386358636012153345270886677817319187916581127664532263985658053576135041753378500342339241406444208643253909725259262722887629951740244068161177590890949849237139072972889848208864154268989409913169357701974867888442508975413295618317692149997742480153043411503595766833251249881517813940800056242085524354223555610630634282023409333198293395974635227120134174961420263590473788550438968706113566004575713995659556695691756457822195250006053923123400500928676487552972205676625366607448585350526233067849463342224231763727702663240768010444331582573350589309813622634319868647194698997018081895242644596203452214119223291259819632581110417049580704812040345599494350685555185557251238864165501026243631257102444961878942468290340447471611545572320173767659046091852957560357798439805415538077906439363972302875606299948221385217734859245351512104634555504070722787242153477875291121212118433178933519103800801111817900459061884624964710424424830888012940681131469595327944789899893169157746079246180750067987712420484738050277360829155991396244891494356068346252906440832794464268088898974604630835353787504206137475760688340187908819255911797357446419024853787114619409019191368803511039763843604128105811037869895185201469704564202176389289088444637782638589379244004602887540539846015606170522361509038577541004219368498725427185037521555769331672300477826986666244621067846427248638527457821341006798564530527112418059597284945519545131017230975087149652943628290254001204778032415546448998870617799819003360656224388640963928775351726629597143822795630795614952301544423501653891727864091304197939711135628213936745768117492206756210888781887367167162762262337987711153950968298289068301825908140100389550972326150845283458789360734639611723667836657198260792144028911900899558424152249571291832321674118997572013940378819772801528872341866834541838286730027431532022960762861252476102864234696302011180269122023601581012762843054186171761857514069010156162909176398126722596559628234906785462416185794558444265961285L

// if larger than 70, c++ cannot calculate the formula precisely
#define FIB_MAX_PRECISE_BINET 70
// if larger than 92, unsigned long long cannot store the value
#define FIB_MAX_ULL 92

#define BASE_TEN_CARRY 10

// use Binet's Formula to calculate fib
inline unsigned long long fib_binet(unsigned long long n) { return ((std::pow((1+std::sqrt(5))/2,n)-std::pow((1-std::sqrt(5))/2,n))/std::sqrt(5));}

// use macro instead of sqrt()
inline unsigned long long fib_binetMacro(unsigned long long n) { return ((std::pow((1+SQRT_5)/2,n)-std::pow((1-SQRT_5)/2,n))/SQRT_5);}

// use dp to calculate fib
unsigned long long fib_dp(unsigned long long n) {
  // O(1)
  if(n <= FIB_MAX_PRECISE_BINET) return fib_binetMacro(FIB_MAX_PRECISE_BINET);
  // local variables
  unsigned long long a = fib_binetMacro(FIB_MAX_PRECISE_BINET-1),
                     b = fib_binetMacro(FIB_MAX_PRECISE_BINET),
                     i = FIB_MAX_PRECISE_BINET;
  // O(n)
  while(i++ < n) { b = b + a; a = b - a; }
  return b;
}

// based on the input call correspondant functions
unsigned long long fib(unsigned long long n) {
  // the 0th fib number, defined as 0 here
  if (!n) return 0;

  // larger than ULLMAX, need additional O(n) addition
  if (n > FIB_MAX_ULL) return 0; 

  // if larger than 71, c++ cannot calculate the formula precisely
  if (n <= FIB_MAX_PRECISE_BINET) return fib_binetMacro(n); 

  return fib_dp(n);
}

// big number addition
// assume positive numbers
std::string add_big(std::string a, std::string b){ 
  // length of 2 strings
  unsigned long long la = a.length(), lb = b.length(),
                     lm = std::max(la,lb) + 2,
                     i = 0;
  long long m0 = 0; // index of MSB
  std::vector<unsigned short int> va(lm,0), vb(lm,0), vc(lm,0);
  bool hasCarry = false; // flag for carry
  std::string ans = std::string(); // answer of a + b

  // covert to int
  // note the index is inverted
  for (i = 0; i < la; i++) {
    va[i] = a[la - 1 - i] - '0';
  }
  for (i = 0; i < lb; i++) {
    vb[i] = b[lb - 1 - i] - '0';
  }

  // add them up
  for (i = 0; i < lm; i++) {
    vc[i] = vb[i] + va[i] + ((hasCarry) ? 1 : 0);
    hasCarry = 0;
    if (vc[i] >= BASE_TEN_CARRY) {
      vc[i] -= BASE_TEN_CARRY;
      hasCarry = 1;
    }
  }

  // m0 is the highest nonzero number
  for (m0 = lm-1; m0 >= 0; m0--) {
    if (vc[m0]) break;
  }

  if (m0 == -1) {
    return std::string("0");
  } else {
    while(m0 >= 0) {
      ans += ((char)(vc[m0--] + '0'));
    }
  }
  return ans;
}

// call add_big to calculate big fib number
std::string fib_big(unsigned long long n) {
  // too small to calculate
  if(n <= FIB_MAX_ULL ) return std::to_string(fib(n));

  // local variables
  std::string a = std::to_string(fib(FIB_MAX_ULL-1)),
              b = std::to_string(fib(FIB_MAX_ULL)),
              c = std::string();
  unsigned long long i = FIB_MAX_ULL;

  // O(n^2)
  while(i++ < n) { c = add_big(a, b); a = b; b = c;}
  return c;
}

// list of fib number to test
// starting with 60th fib number
#define FIB_TEST_INDEX 60
const long long fibTest[] = {
    1548008755920L,         2504730781961L,        4052739537881L,
    6557470319842L,         10610209857723L,       17167680177565L,
    27777890035288L,        44945570212853L,       72723460248141L,
    117669030460994L,       190392490709135L,      308061521170129L,
    498454011879264L,       806515533049393L,      1304969544928657L,
    2111485077978050L,      3416454622906707L,     5527939700884757L,
    8944394323791464L,      14472334024676221L,    23416728348467685L,
    37889062373143906L,     61305790721611591L,    99194853094755497L,
    160500643816367088L,    259695496911122585L,   420196140727489673L,
    679891637638612258L,    1100087778366101931L,  1779979416004714189L,
    2880067194370816120L,   4660046610375530309L,  7540113804746346429L};
// too large to store in long long
const std::string fibStr[] = {
    "12200160415121876738",        "19740274219868223167",
    "31940434634990099905",        "51680708854858323072",
    "83621143489848422977",        "135301852344706746049",
    "218922995834555169026",       "354224848179261915075",
    "573147844013817084101",       "927372692193078999176",
    "1500520536206896083277",      "2427893228399975082453",
    "3928413764606871165730",      "6356306993006846248183",
    "10284720757613717413913",     "16641027750620563662096",
    "26925748508234281076009",     "43566776258854844738105",
    "70492524767089125814114",     "114059301025943970552219",
    "184551825793033096366333",    "298611126818977066918552",
    "483162952612010163284885",    "781774079430987230203437",
    "1264937032042997393488322",   "2046711111473984623691759",
    "3311648143516982017180081",   "5358359254990966640871840",
    "8670007398507948658051921",   "14028366653498915298923761",
    "22698374052006863956975682",  "36726740705505779255899443",
    "59425114757512643212875125",  "96151855463018422468774568",
    "155576970220531065681649693", "251728825683549488150424261"};

// main driver of the program
// if no command line arguments given, run the default tests
int main(int argc, char **argv){
  // if input any argument, treat the first argument as the input
  if(argc != 1) {
    try {
      unsigned long long input = std::stoul(argv[1]);
      std::string result = std::string();
      if(input <= FIB_MAX_ULL) result = std::to_string(fib(input));
      else result = fib_big(input);
      std::cout << "The " << input << "th fibonacci number is: " << result << std::endl;
    } catch(const std::exception& e) {
      std::cerr << e.what() << '\n';
      return -1;
    }
    return 0;
  }

  // test until fib(92)
  for(int i = FIB_TEST_INDEX; i <= FIB_MAX_ULL; ++i) {
    long long result = fib(i),
              difference = result - fibTest[i-FIB_TEST_INDEX];
    if(difference) {
      std::cout << "should be:\t" << fibTest[i-FIB_TEST_INDEX] << "\n";
      std::cout << "result:\t\t" << result << "\n";
      std::cout << "difference:\t" << difference << "\n";
      std::cout << "\n";
    }
    // std::cout << fib(i) - fibTest[i-FIB_TEST_INDEX]<< "\n";
  }

  // test for big numbers
  for(int i = FIB_MAX_ULL+1; i < 128; ++i) {
    auto result = fib_big(i);
    auto difference = result.compare(fibStr[i-FIB_MAX_ULL-1]);
    // if(difference) {
    if(true) {
      std::cout << "should be:\t" << fibStr[i-FIB_MAX_ULL-1] << "\n";
      std::cout << "result:\t\t" << result << "\n";
      std::cout << "difference:\t" << difference << "\n";
      std::cout << "\n";
    }
    // std::cout << fib_big(i) << "\n";
  }

  // test 2000th fib number
  auto fibNum2000 =
      "422469633339230487870672560234148278257985284025068109801028013731430858"
      "437013070722412359963914151108844608753890960360764019471164359602927198"
      "331259873732625355580260699158591522949245390499872225679531698287448247"
      "299226390183371677806060701161549788671987985831146887087626459736908672"
      "288402365442229524334796448013951534956297208765265606952980649984197744"
      "8720155612802665404554171717881930324025204312082516817125";
  auto result = fib_big(2000);
  auto difference = result.compare(fibNum2000);
  std::cout << "200th fib number is: " << fibNum2000 << "\n";
  std::cout << "result:\t\t" << result << "\n";
  std::cout << "difference:\t" << difference << "\n";

  // test 70333th fib number
  auto fibNum70332 =
      "147648506841898164035801401433637629771903777502849976000817159752720956"
      "262370071919330589917124704617894800753397335206430776529002440406427779"
      "571998466149526536155495518428217573796498414824549569573353475673177960"
      "051723919781624707885098866473533915701505967872474717406049602521698161"
      "856793742673243637193692330479060370139332971321490097506318131939276170"
      "242774211809364260167447233351280856161886130512980732476814354870696106"
      "620885387478067844730959179678881430651592224347475192054444397499973475"
      "850669039057572347596885288774492789386927871935446100285153124270436981"
      "043712253353769679275509483091724274819286338458546413214626014544982362"
      "021943520878533229294039355211546822794904899525556751511462946796265567"
      "579113793671366270545075489959953271774723307775573904013002075483116083"
      "978415529864989564295080025711699763760845490329712932244657640635130410"
      "254779553484849275005372679086442549505033967337706662028443062923490634"
      "030559189120712909025103504465498333655936979620312706221672029950607624"
      "826200097930515172837202523020945926767495334903812516405519387521733870"
      "755275843509913930060467941627069806417802838824509616120822383908719469"
      "961715881229652985241722021501676210512351958574848560883558415737315282"
      "712111817209098670342537836798508019552663994966308334397030913294732023"
      "151119597809742689091965112028261450571646879244459507694354591528653744"
      "019520985500169374042175492760817754330531119260894584152022501356022564"
      "917066429559797534342109041012531047888462432648272454669622910879476072"
      "285106190864779642243026109311368917945879344300080551624607822860713118"
      "455066180423254351880079506758773091416399634766472402025082215271479624"
      "602843570189620874986455617992721163858077126028127174812766594535353053"
      "509522319875169723729531273251429345020381861998755365045808078320083985"
      "895577524794789289973802839065615663699751368139524852272916683414278943"
      "509691124577465024372901334253331834132460771754401803811267441527820801"
      "388768553120618378980098926203195532443086762451207406083004552879704215"
      "245644021015506431735255911143444746901405568306046609090363108513252881"
      "554185484851234587534590760922918007656313610874171245246394771074748693"
      "075792727065116506722249925166300324646584213210168169316829208679677994"
      "318588656544092693201747618270868289100016385502546998706764874398267331"
      "270578798284556058246655970271208640477461619686843040769830185938315959"
      "384271283755987457295237301757100467646832207685516051590366386730234568"
      "434956431554679021841765620573181502547339858046448025605801899824099627"
      "178518169014454562505765723171194089298716801515129326215831949630486131"
      "953548527038524007551170181731781836405961538954071971405528627453738952"
      "985172652456786801512906682723228384417882852858538683072196446391526700"
      "527360646712784203219917511427072168323034591132683317197836233858700764"
      "542209967879496828257871388379986678093050180730195016234487082478166771"
      "512460125644928268078544918717550740595974031391193835662896899585399633"
      "829564196666344636406199266870951650279104167289169873768364665437358735"
      "488550168999443991276208860296311104956792451271820126552177605231475362"
      "960073285285446319181651586854492509109574140576831875796444009458472404"
      "678618679296954042247013366322189940696261481032992370093658891434590406"
      "342652779183661333611388582825791477977728401194982220306953861956654591"
      "972230505094557596962958263426591432094550671435748634014569084878335969"
      "636680889649131240925369175062242204299676691526018056261472443174633150"
      "050986052290865311261160423464125543102183096644500442171031778097177602"
      "267153237187799932166873915187084504710261225896022172233872157227055353"
      "225407473536888347330036154374734189646498054145259262550914144894437165"
      "771022344497331937995375050667971883534206518264961739328681347414894106"
      "742946718793100321464209490407176746077368895212030449198166219055582762"
      "979077514358396058825056512364455595019873225012305790813656620987110063"
      "713427728198200091869305783447336984665242252712554714742483833963534367"
      "718633771192321314339472797839859601428149781451335973019410151182625839"
      "689390929892354160835706385942257158648393985095248191929762835456262312"
      "872559040752814716040183014344012255866436108037631615968520736041906329"
      "193392792268438753094329592784864546288060061940779179380025502843717615"
      "919277079379358893318997292320328474078861503960742702826397868526084695"
      "321002589397606089911498733480691389832590054801539717893553791265855369"
      "495102942279451542084763692738491093591215184249000260303494792618091268"
      "649383888587424980821359347960831211445318526251477157365754445372421362"
      "100000470413155502440628714129305707321984873010705386941169555769685774"
      "927390149844674975820204278885902517358797472469956064959938031767975167"
      "835325208281902476076955082600472271829316021685760213612221861249313380"
      "276494399489361467691290265270596142982434899628231188515205628322190166"
      "590069826969056338236132813379971440192629794927205143745427058344895955"
      "549086360942389173937459742977580590656086612745491070280399665033428092"
      "850930896335262914969962865813354302297857010199545826964852218316975151"
      "716770573166650979770915463157371121134532518360361803797865131547474724"
      "342276141689315818104571559892258677395178496965644443343358634583602896"
      "814972301876288676332204505651221076516695324888236451818545099414006121"
      "924183569971125304051815278005671787620249082900078758529996123800941509"
      "653071292694859586701761692225130186442942749776893867161403047504339998"
      "803039301432458302231680811090665075918356965432610307282605125068602031"
      "811105173159875331486642194311588118636871134134154663999852144897515150"
      "121753717553469961395007999153249002895982061242341113672183635584668809"
      "135108446340912016852298910786680813639510520065571299483614076789418337"
      "843336253164143447178058735518333475875344781228758575511993902365597443"
      "364071020634056249002302766031264581267258184413671199363526342471519940"
      "889796022673766544866192321271249499983818266937031787542240372561626444"
      "009769722348158308531319173646294190911373722835060782470240624757946463"
      "990229023480711962078669601528468334898176849655146785035794108309230031"
      "758987155518576753812267260248301466067390252048576615982137219846192031"
      "334936740225024129277199272118484710822630601430174791844916330868683835"
      "732548277970868495579864296837978240122698800605286528636009246966919778"
      "413210831920321053978430021135303946605113312351353703184311244342652257"
      "419073399836201061750366267066664251839406019360666003241658799517727690"
      "616653759252349681370208324018892477659778225631154830945820168208881046"
      "170483381488566771608268593136801526711183648276934515316931141901573683"
      "427314022309676547718457365783701936241233562067187299136899982645416055"
      "511003515291115966766133551646439282847244433736123761051483519156916504"
      "895532084910770053661555214093131548060525583024607651188669847408575947"
      "167479408984743583394046123894273263103221109383325908215324160242472572"
      "935794545138211817765299847685448546819821788463904193351629024078669315"
      "507598167174751369224332772752353124554194716809059905632185938210338120"
      "374957082869013206299169781219425975319756980881157587326151540998377020"
      "306722625890273624228772412120149895119423149714030959493766768451478647"
      "647432059523721053521330335698492974566498463667750943833197551429350276"
      "780111504797246902442867569020241295080691063379744109659198433551328880"
      "605684654191209840360957036088963609106496828024496984386158535015934724"
      "868642157660564526367985914999359391137594654401903614108229607468129340"
      "097249773662870052155233588176092095740915469660088641527554263618042104"
      "593989908646578954196376598935675748293415714383362703836207266567335930"
      "704424189181794467629255000784042832093567945276609437100736344379307876"
      "830375468188000923245408165750712491178019911688021065862978846297702319"
      "286323254806919678519622189506124069402739572116737036268604648294614335"
      "453034468899534211269725398516913176697603502950435545771036165824830076"
      "342007315496219529412342859889548616424346517143702583202121610524330515"
      "407859068779310809009261511929758391730273769921518771912439624601357165"
      "842231002636373993536675757157258769456181147134151734825883508614249001"
      "430536399311583468479072266396417364043923813697916932929492168216049527"
      "578851091381844434641175568862497323503597942913730783497169963579135618"
      "258176560688397142661579310744228217364763478001064581415174786564448520"
      "254886953653810767443400660566912328189039161292358495419229947085959329"
      "038500681576773817523759603037405263784969790411303777561910890188970565"
      "632363437193158879180653860529944749798425275751440428399426202305384034"
      "203575266433793769384184765516511084424753677648579792579896486913800469"
      "400233753896411084727237222086335057073231320882506254825038298550711806"
      "276635136940117676179276605777213308701261776933325250508925452969763844"
      "264687427864279024757299742244206485978122413286366526437924354181150311"
      "226795789249623674894004187337893062792114445621240475784909712514669836"
      "051575686593741639314540344136558995977333753211443708525321904635440387"
      "031459344744431654772596150087218464632433815965718146486628629006757021"
      "702364107371495632663397148793053041358968637319532259192625797089132232"
      "574017342954735441165975695877172051005267960417834989871245958411223936"
      "669325533829567972867808042394367821053117673075206100795205041374175256"
      "389438359624216649492798870832800455705859068975135061094159747485363313"
      "965381773424781263258987482323365598583747233764310791077243331928920655"
      "746635534851039210624141795711349041453572988025869832625077426350206598"
      "716528242842567186650241261758922100350146176753415638442778135447677474"
      "352983011346371991799320337255341389009587737753387520515789681008632646"
      "810728988438889558449751596875292481717416940028736914106926812092856801"
      "260587841548448216831933101601456973921990455984463598513972453813367387"
      "070559185669599897061549476194804530814624578520699294223617191883822444"
      "800098506907668131152615089221755104314852422640503222450858697456979897"
      "797442199215493974953129208308481738465190681652509651225793395817858121"
      "073556769837479698463752470123961326084368405059952873153421136150339788"
      "105516402361587886763652505220833765543598021240637276855239899130492862"
      "908961219899211276541849157707333578057255257799564279741108493240622024"
      "845512562036220512224803640978650128437780327638592239899166897930791099"
      "524270862177009658538519890533075231382887122661941494455496402939040620"
      "334585248462417071177491928280994724507779668055483258986490249599860473"
      "909883877930134095545100518470287250464718136735692516020162957381533410"
      "725698905448289100084776513966492556062691207963397625533033272188626941"
      "889939633335865105937991102335378799192928462977046640769271427641982363"
      "916275661022656812528819405767942079022917062179900719344240799743639779"
      "196890164000291569713281397270890538161800153967780506620565690479660323"
      "873981847876064554245882411631246131325817205387609609747307278955771413"
      "081927311782758850202784646451132218991406022102716233608530291497423976"
      "707663201946882917483438633460426595028373185327656752245530870365916264"
      "521175357587203660190211449893504057452713828468877826898991875249810031"
      "185641693351342011503344343464375954742094589197498293750200945628813194"
      "847504731886476646903217178134210227466551232082727441763684799211858637"
      "033208909855331805755341182711770983261242055177691698441072756693066133"
      "922016446009650548564815820525265674692016785485530978770728495931064058"
      "732617581859809956518334454926810363351544051354735760752917485696697293"
      "608656149874574902503616379037286343669837881504976841256912029021670936"
      "985929947351827590693730074529484192379288556311255400304813452879011336"
      "640540480190452701784601668849716382500961174630123626891091308203808613"
      "784924710413794821031063449359281715490624946078098399397893870375529131"
      "095982183981571566869300978953172422099406073367231979370613272059800415"
      "715948351704812711599473205923059266116903065446068127071610610811038430"
      "187697834645345435287102592478538498977600464198715277559807598484009026"
      "576170678141701167705978907686389367855242999960754827189403947906501341"
      "837114575180629801581326939295109887969687461362668859702927847071629910"
      "946298426213756741864614303096621736691184357850956352810850169342681596"
      "466567290628492144989044846074949874077140720401858104530657034753624966"
      "938287557495530690469895378884350898317693028521389876616315274675919220"
      "935775688083755023862898917119789873537375938126024484003620692612884307"
      "966669523630922951928055821694779668254042137881378031213448787192990915"
      "720208060868929740244370206755584762009516981785480339674334497433993064"
      "081555772386253346664506406093556706568365090158414787455139994083063197"
      "082278322538705464602593435459572481799569898364024399508474963633712732"
      "504226199951704440182195132037135966487261810223552499177627348915787596"
      "111035660282041559451981066058996767829794526014306130600554633534926284"
      "315437414752443325248027282151267868340390765249503922898871936420794401"
      "247463572590234596657213539468671554734254241845467412473059365975584835"
      "383316067965104980320932468671092367371523636656512457508000963835500068"
      "935121109856094313771287117453190077068266462267575356091381231572418835"
      "185319831432939101074054963453066666653445962141271813270047478789640716"
      "709956799441933607491502932394145936220234627413776855127714629069200993"
      "383201021793541905883732827337896175468417618027378104345776074901545382"
      "123062049580491428087027229996915328188519328007196986939470031105685742"
      "643576368136451119780533213363417340450572200298202779482959926967707975"
      "845612740246248753979402385601092807453331577267754895360007937150309946"
      "828153704237508635725454614701369544989738580953320651655185034694140442"
      "260388547778026824762940655713715815041664854147287823977694943496862844"
      "035988824206712021892806778393680723952515674413547733873110471299340841"
      "178428663098053703511173670359842822717773679494632813878351678308760829"
      "219424058772145960691726510982832770616297797295437093376151657557274866"
      "318308807232076294308304691730529016676625311571708244837080566805267344"
      "839877983268018487448213337154354704515441911573532920145916398033249421"
      "293544542015108888906617710246572810504903135393545215670529424025029719"
      "994970578692921406382858126972012965522339994914033564731782502927442410"
      "454747759072636432202718592281099523744331720665422945870663397771531947"
      "967433469275075629686992934242907969647493620338127460748952811049420477"
      "264349494712998848563345027454435158485147575899959621804509326140117115"
      "323333225001722299611951939337469562926017106200026117329954110743573210"
      "740457181397406860783291005410268975375187104643637100786927800429052862"
      "035093406590004645430917047278704411349643191425967408494384935615836489"
      "502755702562207854703666372144689805253023372660863058317532929332552244"
      "172386184952971938819341683867271994735126240287405611087016153703798851"
      "46303000784";
  result = fib_big(70332);
  difference = result.compare(fibNum70332);
  std::cout << "70332th fib number is: " << fibNum70332 << "\n";
  std::cout << "result:\t\t" << result << "\n";
  std::cout << "difference:\t" << difference << "\n";

  std::cout << "\n";

  std::cout << "99999th fib number is: " << fib_big(99999) << "\n";

  std::cout << "All tests done";

  std::cout << std::endl;
  return 0;
}